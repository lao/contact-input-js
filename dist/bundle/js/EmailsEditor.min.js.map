{"version":3,"file":"EmailsEditor.min.js","sources":["../../../src/emailsEditor.js"],"sourcesContent":["import './main.scss';\n\n// TODO: turn this into createElement and EXTERNALIZE\nconst REMOVE_SVG = `<svg class=\"remove-icon-svg\" width=\"8\" height=\"8\" viewBox=\"0 0 8 8\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M8 0.8L7.2 0L4 3.2L0.8 0L0 0.8L3.2 4L0 7.2L0.8 8L4 4.8L7.2 8L8 7.2L4.8 4L8 0.8Z\" fill=\"#050038\"/>\n</svg>`;\n\n// TODO: add random email\n\nexport default class emailsEditor {\n  constructor(config) {\n    config = config || {};\n\n    if (!config || !config.container) {\n      throw new Error('invalid config exiting...');\n    }\n\n    this\n      .initValues(config)\n      .renderMainContainer()\n      .initListeners();\n  }\n\n  initValues(config) {\n    this.emails = [];\n    this.onChange = config.onChange;\n    this.container = config.container;\n    this.onGetCount = config.onGetCount;\n    return this;\n  }\n\n  getEmails() {\n    return this.emails;\n  }\n\n  /**\n   * It clears emails in view and render only valid ones\n   */\n  setEmails(emails) {\n    if(!emails) {\n      return;\n    }\n    alert(emails);\n    const newEmails = emails.reduce((validEmails, email) => {\n      const regexResults = this.isValidEmail(email);\n      if (regexResults) {\n        validEmails.push(regexResults[0]);\n      }\n      return validEmails;\n    }, []);\n    const emailsBefore = [...this.emails];\n    this\n      .clearEmailBlocks()\n      .renderEmailBlocks(null, newEmails)\n      .dispatchOnChange(emailsBefore);\n  }\n\n  clearEmailBlocks() {\n    this.emails = [];\n    this.container\n      .querySelectorAll('.ballon')\n      .forEach(el => el.remove());\n\n    return this;\n  }\n\n  dispatchOnChange(emailsBefore) {\n    this.onChange(emailsBefore, this.emails);\n    return this;\n  }\n\n  initListeners() {\n    const {container} = this;\n    const input = container.querySelector('input');\n    const ballonsContainer = container.querySelector('.ballons-container');\n    const getCountBtn = container.querySelector('.btn-count');\n    const keys = {\n      ENTER: 13,\n      COMMA: 188,\n    };\n    const keyUpListener = e => {\n      const { keyCode, currentTarget, ctrlKey, metaKey } = e || {};\n      if (keyCode === keys.COMMA || keyCode === keys.ENTER) {\n        const emailsBefore = [...this.emails];\n        this\n          .renderEmailBlocks(currentTarget.value)\n          .dispatchOnChange(emailsBefore)\n          .cleanInput();\n      }\n      if (metaKey || ctrlKey) {\n        return false;\n      }\n      return e;\n    };\n    const pasteListener = e => {\n      const { currentTarget, clipboardData } = e || {};\n      const clipBoardText = clipboardData.getData('text');\n      const emailsBefore = [...this.emails];\n      this\n        .renderEmailBlocks(currentTarget.value+clipBoardText)\n        .dispatchOnChange(emailsBefore)\n        .cleanInput();\n\n      e.preventDefault();\n    };\n    const ballonsClickHandler = e => {\n      const isClickOnSvg = e.target.getAttribute('class') === 'remove-icon-svg';\n      const target = isClickOnSvg ? e.target.parentElement : e.target;\n\n      if (target.className === 'remove-icon') {\n        if (target.parentElement.className !== 'invalid ballon') {\n          const emailsBefore = [...this.emails];\n          this.emails.splice(this.emails.indexOf(target.parentElement.getAttribute('data-email')), 1);\n          this.dispatchOnChange(emailsBefore);\n        }\n        ballonsContainer.removeChild(target.parentElement);\n      }\n    };\n\n    input.addEventListener('paste', pasteListener);\n    input.addEventListener('keyup', keyUpListener);\n    ballonsContainer.addEventListener('click', ballonsClickHandler);\n\n    if (this.onGetCount && this.onGetCount instanceof Function) {\n      getCountBtn.addEventListener('click', () => {\n        this.onGetCount(this.emails.length);\n      });\n    }\n\n    // TODO: losing focus and adding blocks;\n\n    return this;\n  }\n\n  renderEmailBlock(string, valid) {\n    const removeIconDiv = document.createElement('div');\n    removeIconDiv.className = !valid ? 'invalid ballon' : 'ballon';\n    // TODO: turn this into createElement\n    removeIconDiv.innerHTML = `${valid ? string : `<span>${string}</span>`} <div class=\"remove-icon\">${REMOVE_SVG}</div>`;\n    removeIconDiv.setAttribute('data-email', valid ? string : '');\n    return removeIconDiv;\n  }\n\n  isValidEmail(string) {\n    // eslint-disable-next-line max-len\n    const emailRegx = /(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))/g;\n    return emailRegx.exec(string);\n  }\n\n  /**\n   * It break string value into blocks by comma, checks if is valid, adds to local copy of valid emails\n   * and then renders, all in one go for performance purposes.\n   */\n  renderEmailBlocks(stringValue, values) {\n    const blocks = values || (stringValue || '').split(',');\n    const ballonsBlockFrag = document.createDocumentFragment();\n\n    blocks.map((block) => {\n      block = (block + '').trim();\n      if (!block) {\n        return;\n      }\n      const isEmail = this.isValidEmail(block);\n      ballonsBlockFrag.appendChild(this.renderEmailBlock(block, isEmail));\n\n      // validations and saving to local copy\n      if (isEmail) {\n        this.emails.push(block);\n      }\n    });\n\n    const inputEl = this.container.querySelector('.input-container');\n    this.container\n      .querySelector('.ballons-container')\n      .insertBefore(ballonsBlockFrag, inputEl);\n\n    return this;\n  }\n\n  cleanInput() {\n    const {container} = this;\n    const input = container.querySelector('input');\n    input.value = '';\n    return this;\n  }\n\n  /**\n   * Renders main html container for editor\n   */\n  renderMainContainer() {\n    const {container} = this;\n    // TODO: turn this to createDocumentFragment later\n    const template = `\n      <div class=\"container\">\n        <div class=\"top\">\n          <h1>Share <strong>Board name</strong> with others</h1>\n          <div class=\"text-container\">\n            <div class=\"ballons-container\">\n              <div class=\"input-container\"><input placeholder=\"add more people...\"/></div>\n            </div>\n          </div>\n        </div>\n        <div class=\"bottom\">\n          <button>\n            Add email\n          </button>  \n          <button class=\"btn-count\">\n            Get emails count\n          </button>\n        </div>\n      </div>\n    `;\n    container.innerHTML = template;\n    return this;\n  }\n}\n"],"names":["config","container","Error","initValues","renderMainContainer","initListeners","emails","onChange","onGetCount","this","alert","newEmails","reduce","validEmails","email","regexResults","_this","isValidEmail","push","emailsBefore","clearEmailBlocks","renderEmailBlocks","dispatchOnChange","querySelectorAll","forEach","el","remove","input","querySelector","ballonsContainer","getCountBtn","keys","addEventListener","e","currentTarget","clipBoardText","clipboardData","getData","_this2","value","cleanInput","preventDefault","keyCode","ctrlKey","metaKey","target","getAttribute","parentElement","className","splice","indexOf","removeChild","Function","length","string","valid","removeIconDiv","document","createElement","innerHTML","setAttribute","exec","stringValue","values","blocks","split","ballonsBlockFrag","createDocumentFragment","map","block","trim","isEmail","_this3","appendChild","renderEmailBlock","inputEl","insertBefore"],"mappings":"ikBAUcA,8GACVA,EAASA,GAAU,MAEHA,EAAOC,gBACf,IAAIC,MAAM,kCAIfC,WAAWH,GACXI,sBACAC,0EAGML,eACJM,OAAS,QACTC,SAAWP,EAAOO,cAClBN,UAAYD,EAAOC,eACnBO,WAAaR,EAAOQ,WAClBC,gDAIAA,KAAKH,yCAMJA,iBACJA,GAGJI,MAAMJ,OACAK,EAAYL,EAAOM,OAAO,SAACC,EAAaC,OACtCC,EAAeC,EAAKC,aAAaH,UACnCC,GACFF,EAAYK,KAAKH,EAAa,IAEzBF,GACN,IACGM,IAAmBV,KAAKH,aAE3Bc,mBACAC,kBAAkB,KAAMV,GACxBW,iBAAiBH,2DAIfb,OAAS,QACTL,UACFsB,iBAAiB,WACjBC,QAAQ,SAAAC,UAAMA,EAAGC,WAEbjB,8CAGQU,eACVZ,SAASY,EAAcV,KAAKH,QAC1BG,wDAIAR,EAAaQ,KAAbR,UACD0B,EAAQ1B,EAAU2B,cAAc,SAChCC,EAAmB5B,EAAU2B,cAAc,sBAC3CE,EAAc7B,EAAU2B,cAAc,cACtCG,EACG,GADHA,EAEG,WAyCTJ,EAAMK,iBAAiB,QAzBD,SAAAC,SACqBA,GAAK,GAAtCC,IAAAA,cACFC,IADiBC,cACaC,QAAQ,QACtClB,IAAmBmB,EAAKhC,QAC9BgC,EACGjB,kBAAkBa,EAAcK,MAAMJ,GACtCb,iBAAiBH,GACjBqB,aAEHP,EAAEQ,mBAiBJd,EAAMK,iBAAiB,QAxCD,SAAAC,SACiCA,GAAK,GAAlDS,IAAAA,QAASR,IAAAA,cAAeS,IAAAA,QAASC,IAAAA,WACrCF,IAAYX,GAAcW,IAAYX,EAAY,KAC9CZ,IAAmBmB,EAAKhC,QAC9BgC,EACGjB,kBAAkBa,EAAcK,OAChCjB,iBAAiBH,GACjBqB,oBAEDI,IAAWD,GAGRV,IA6BTJ,EAAiBG,iBAAiB,QAhBN,SAAAC,OAEpBY,EADkD,oBAAnCZ,EAAEY,OAAOC,aAAa,SACbb,EAAEY,OAAOE,cAAgBd,EAAEY,UAEhC,gBAArBA,EAAOG,UAA6B,IACC,mBAAnCH,EAAOE,cAAcC,UAAgC,KACjD7B,IAAmBmB,EAAKhC,QAC9BgC,EAAKhC,OAAO2C,OAAOX,EAAKhC,OAAO4C,QAAQL,EAAOE,cAAcD,aAAa,eAAgB,GACzFR,EAAKhB,iBAAiBH,GAExBU,EAAiBsB,YAAYN,EAAOE,kBAQpCtC,KAAKD,YAAcC,KAAKD,sBAAsB4C,UAChDtB,EAAYE,iBAAiB,QAAS,WACpCM,EAAK9B,WAAW8B,EAAKhC,OAAO+C,UAMzB5C,8CAGQ6C,EAAQC,OACjBC,EAAgBC,SAASC,cAAc,cAC7CF,EAAcR,UAAaO,EAA2B,SAAnB,iBAEnCC,EAAcG,oBAAeJ,EAAQD,kBAAkBA,8UACvDE,EAAcI,aAAa,aAAcL,EAAQD,EAAS,IACnDE,uCAGIF,SAEO,sJACDO,KAAKP,6CAONQ,EAAaC,cACvBC,EAASD,IAAWD,GAAe,IAAIG,MAAM,KAC7CC,EAAmBT,SAASU,yBAElCH,EAAOI,IAAI,SAACC,MACVA,GAASA,EAAQ,IAAIC,YAIfC,EAAUC,EAAKvD,aAAaoD,GAClCH,EAAiBO,YAAYD,EAAKE,iBAAiBL,EAAOE,IAGtDA,GACFC,EAAKlE,OAAOY,KAAKmD,UAIfM,EAAUlE,KAAKR,UAAU2B,cAAc,gCACxC3B,UACF2B,cAAc,sBACdgD,aAAaV,EAAkBS,GAE3BlE,iDAIaA,KAAbR,UACiB2B,cAAc,SAChCW,MAAQ,GACP9B,0DAOaA,KAAbR,UAsBG0D,6kBACHlD"}